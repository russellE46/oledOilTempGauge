#include "baseChibis.hpp"

#define SMILE_COEFFICIENT                   0.4
#define SMILE_ORIGIN_X                      SCREEN_WIDTH / 2
#define SMILE_ORIGIN_Y                      11
#define SMILE_WIDTH_PX                      70
#define SMILE_HEIGHT_PX                     3             

#define SMILE_FINAL_CURVE_COEFFICIENT       0.75
#define SMILE_NUM_FRAMES                    30
#define SMILE_FINAL_CURVE_DERIV(x)          2 * SMILE_FINAL_CURVE_COEFFICIENT * x   // Derivative of SFCC * x^2        

// HAPPY_CHIBI compressed using run-length encoding
// Can ignore for now
const unsigned char HAPPY_CHIBI_COMPRESSED [] PROGMEM = 
	{
		0x3, 0x51, 0xff, 0xff, 0xff, 0xa3, 0xe0, 0x1, 0xf, 0x1, 0xff, 0x6, 0xf8, 0x1, 0x1, 0x1, 
		0xff, 0x6, 0x80, 0x1, 0x1, 0x1, 0xff, 0x6, 0xe0, 0x1, 0x0, 0x1, 0x7f, 0x1, 0xff, 0x4, 
		0xfe, 0x1, 0x0, 0x2, 0xff, 0x6, 0x80, 0x1, 0x0, 0x1, 0x3f, 0x1, 0xff, 0x4, 0xfc, 0x1, 
		0x0, 0x2, 0x7f, 0x1, 0xff, 0x5, 0x0, 0x2, 0x1f, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 
		0x3f, 0x1, 0xff, 0x4, 0xfe, 0x1, 0x0, 0x2, 0xf, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x0, 0x2, 
		0x1f, 0x1, 0xff, 0x4, 0xfc, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 
		0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 
		0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x1c, 0x1, 
		0x6, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x7, 0x1, 0x1, 0x1, 0x81, 0x1, 0xff, 0x4, 
		0xc0, 0x1, 0x7f, 0x1, 0x1f, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x1f, 0x1, 0xc7, 0x1, 
		0xc1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0xff, 0x1, 0x9f, 0x1, 0x83, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x1f, 0x1, 0xe7, 0x1, 0xe0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 0x9f, 0x1, 0x83, 0x1, 
		0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf7, 0x1, 0xe0, 0x1, 0xff, 0x4, 0x81, 0x1, 0xff, 0x1, 
		0xdf, 0x1, 0x83, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf7, 0x1, 0xe0, 0x1, 0xff, 0x4, 
		0x81, 0x1, 0xff, 0x1, 0xcf, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf3, 0x1, 
		0xc0, 0x1, 0xff, 0x4, 0x81, 0x1, 0xff, 0x1, 0xc0, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 
		0x3f, 0x1, 0xf0, 0x1, 0x0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 0x80, 0x1, 0x3, 0x1, 
		0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf0, 0x1, 0x0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 
		0x80, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x1f, 0x1, 0xe0, 0x1, 0x0, 0x1, 0xff, 0x4, 
		0x80, 0x1, 0x7f, 0x1, 0x0, 0x1, 0x3, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x1f, 0x1, 0xc0, 0x1, 
		0x0, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x1c, 0x1, 0x0, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x7, 0x1, 0x0, 0x2, 0xff, 0x4, 0xc0, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xf8, 0x1, 
		0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 
		0x0, 0x2, 0x3, 0x1, 0xff, 0x4, 0xfc, 0x1, 0x0, 0x2, 0x1f, 0x1, 0xff, 0x4, 0xfc, 0x1, 
		0x0, 0x2, 0x1f, 0x1, 0xff, 0x5, 0x80, 0x1, 0x0, 0x1, 0x1f, 0x1, 0xff, 0x4, 0xfe, 0x1, 
		0x0, 0x2, 0xff, 0x6, 0xe0, 0x1, 0x0, 0x1, 0x3f, 0x1, 0xff, 0x4, 0xfe, 0x1, 0x0, 0x1, 
		0x3, 0x1, 0xff, 0x6, 0xf8, 0x1, 0x0, 0x1, 0x7f, 0x1, 0xff, 0x5, 0x0, 0x1, 0x7, 0x1, 
		0xff, 0x6, 0xfc, 0x1, 0x1, 0x1, 0xff, 0x6, 0xc0, 0x1, 0xf, 0x1, 0xff, 0x6, 0xfe, 0x1, 
		0x3, 0x1, 0xff, 0x1, 0xe7, 0x1, 0xff, 0x2, 0xfb, 0x1, 0xff, 0x1, 0xf0, 0x1, 0x1f, 0x1, 
		0xff, 0x6, 0xfe, 0x1, 0x1f, 0x1, 0xff, 0x1, 0xc7, 0x1, 0xff, 0x2, 0xf1, 0x1, 0xff, 0x1, 
		0xfe, 0x1, 0x3f, 0x1, 0xff, 0x9, 0xc3, 0x1, 0xff, 0x2, 0xf1, 0x1, 0xff, 0xc, 0xe3, 0x1, 
		0xff, 0x2, 0xe1, 0x1, 0xff, 0xc, 0xe3, 0x1, 0xff, 0x2, 0xe3, 0x1, 0xff, 0xc, 0xe1, 0x1, 
		0xff, 0x2, 0xe3, 0x1, 0xff, 0xc, 0xf0, 0x1, 0xff, 0x2, 0xc3, 0x1, 0xff, 0xc, 0xf0, 0x1, 
		0x7f, 0x1, 0xff, 0x1, 0x87, 0x1, 0xff, 0xc, 0xf8, 0x1, 0x3f, 0x1, 0xfe, 0x1, 0xf, 0x1, 
		0xff, 0xc, 0xfc, 0x1, 0x7, 0x1, 0xf8, 0x1, 0x1f, 0x1, 0xff, 0xc, 0xfe, 0x1, 0x0, 0x2, 
		0x3f, 0x1, 0xff, 0xd, 0x80, 0x1, 0x0, 0x1, 0xff, 0xe, 0xf0, 0x1, 0x3, 0x1, 0xff, 0xa7
		
	};

	
// TASK HERE
// This should be the last frame of the animation
// First frame of the animation should have mouth straight like an underscore _
// Animation should make mouth curve upward until it matches the image below.
// You will need to generate the image with the flat mouth.
// Write a loop that starts with the flat-mouth image and ends with the image below.
// Idk what else to say rn.
const unsigned char HAPPY_CHIBI [LEN_IMG_BYTE_ARR] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x1c, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x01, 0x81, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x7f, 0x1f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xc7, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0xff, 0x9f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x9f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xdf, 0x83, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xcf, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf3, 0xc0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xe0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x7f, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xc0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x1c, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xe7, 0xff, 0xff, 0xfb, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xc7, 0xff, 0xff, 0xf1, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff 
};


const unsigned char BLANK_CHIBI [LEN_IMG_BYTE_ARR] PROGMEM = 	{
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x38, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0e, 0x03, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xfe, 0x3e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0x8f, 0x83, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0x3f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xcf, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0x01, 0xff, 0x3f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xef, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0x03, 0xff, 0xbf, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xef, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0x03, 0xff, 0x9e, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xe7, 0x81, 0xff, 0xff, 
	0xff, 0xff, 0x03, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xe0, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x01, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xe0, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x01, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc0, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0x80, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x38, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0e, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


const unsigned char * ALL_CHIBIS [] PROGMEM = {
	BLANK_CHIBI,
	HAPPY_CHIBI
};

unsigned char chibiOutputImage [LEN_IMG_BYTE_ARR];


/***************************************************************************************
 * @brief - decompressImage()
 *  Decompresses a run-length encoded image byte array into IMG_DECOMPRESSED
 * 
 *  NOT CURRENTLY WORKING
 * 
 * @return - None
 ***************************************************************************************/
void rleDecompressImage(const unsigned char * CompImage)
{
    PTR_COMPRESSED_CHIBI ptrCompChibi = (PTR_COMPRESSED_CHIBI)CompImage;
    unsigned int size = 0, it = 0, decIt = 0;
    for (; it < ptrCompChibi->BytesOfSize; it++)
    {
        size += ptrCompChibi->Data[it];
    }

    while (it < size)
    {
        PTR_ENCODED_PAIR ptrEncPair = (ENCODED_PAIR*)(&ptrCompChibi->Data[it]);
        for (unsigned char i  = 0; i < ptrEncPair->Reps; i++)
        {
            // IMG_DECOMPRESSED[decIt] = ptrEncPair->Value;
            //IMG_DECOMPRESSED[decIt] = IMG_DECOMPRESSED[decIt];
            decIt++;
        }
        it += 2;
    }
}


/***********************************************************************************
 * @brief - chibisAnimateBlankToSmile()
 *  Returns the Nth frame of the blank chibi -> smiling chibi animation
 * 
 * @param - Frame: Number of the frame to return
 * @param - Load: Boolean that determines if the base image needs to be loaded from flash
 *                  Should only be necessary if retrieving frame 0 or if not loading frames
 *                  sequentially.
 * 
 * @return - unsigned char * : A pointer to the first element in an image byte array
 ***********************************************************************************/
unsigned char * chibisAnimateBlankToSmile(unsigned char Frame, bool Load)
{
    char offsetX;
    char offsetY;
    if (Frame == 0 || Load == true)
    {
        chibisLoadBaseOutputFrame(NUM_BLANK_CHIBI);
    }

    for (int i = 0; i < SMILE_WIDTH_PX; i++)
    {
        offsetX = (SMILE_WIDTH_PX - SMILE_ORIGIN_X + i);
        offsetY = (float(Frame) / float(SMILE_NUM_FRAMES)) * SMILE_FINAL_CURVE_DERIV(offsetX);

        chibisDrawPixel(SMILE_ORIGIN_X, SMILE_ORIGIN_Y,
                        offsetX, offsetY);
    }
}


/***********************************************************************************
 * @brief - chibisLoadBaseOutputFrame()
 *  Loads one of the base image byte arrays flash into outputFrame
 * 
 * @param - Index: Index of ALL_CHIBIS enum corresponding to the base image
 * 
 * @return - None
 ***********************************************************************************/
void chibisLoadBaseOutputFrame(unsigned char Index)
{
    for (int i = 0; i < LEN_IMG_BYTE_ARR; i++)
    {
        chibiOutputImage[i] = pgm_read_byte(&(ALL_CHIBIS[Index][i]));
    }
}


/***********************************************************************************
 * @brief - chibisDrawPixel()
 *  Draws a pixel in a specified coordinate. Set offsetX and offsetY to zero
 *      if you just want to draw at the origin coordinates.
 * 
 * @param - OriginX: Point of reference in X dimensiom
 * @param - OriginY: Point of reference in Y dimension
 * @param - OffsetX: Pixel offset in X dimension relative to point of reference
 * @param - OffsetY: Pixel offset in X dimension relative to point of reference
 * 
 * @return - CHIBIS_STATUS_SUCCESS: Operation completed successfully
 * @return - CHIBIS_STATUS_INVALID_COORDS: Invalid coordinates calculated from parameters
 ***********************************************************************************/
CHIBIS_STATUS chibisDrawPixel(unsigned char OriginX, unsigned char OriginY, char OffsetX, char OffsetY)
{
    CHIBIS_STATUS status = CHIBIS_STATUS_SUCCESS;
    int absoluteX, absoluteY, byteArrIndex;

    absoluteX = OriginX + OffsetX;
    absoluteY = OriginY + OffsetY;

    if (((absoluteX) < 0) ||
        ((absoluteY) < 0) ||
        ((absoluteX) >= SCREEN_WIDTH) ||
        ((absoluteY) >= SCREEN_HEIGHT))
    {
        status = CHIBIS_STATUS_INVALID_COORDS;
        Serial.printf("chibisDrawPixel() failed with status: %d\r\n", status);
        if (CHIBIS_DEBUG)
        {
            Serial.printf("OriginX: %d, OriginY: %d, OffsetX: %d, OffsetY: %d\r\n",
                                OriginX, OriginY, OffsetX, OffsetY);
        }

        return status;
    }
    
    // Index in byte array is 16 * absoluteY + absoluteX / 8
    // Bit index within byte index = absoluteX % 8
    // absoluteX = 6, absoluteY = 0.
    // 16 * 0 + 6 / 8 = 0
    // 6 % 8 = 6
    // bit[6] || bit[7-6];
    // byteArray[0] = byteArray[0] 

    return status;
}