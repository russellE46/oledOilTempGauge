#ifndef BASE_CHIBIS_HPP
#define BASE_CHIBIS_HPP

#include <avr/pgmspace.h>
#include "halDisplay.hpp"

#define NUM_PIXELS			SCREEN_WIDTH * SCREEN_HEIGHT
#define LEN_IMG_BYTE_ARR		NUM_PIXELS / 8

// 128x60px
extern const unsigned char IMG_DECOMPRESSED[];
extern const unsigned char HAPPY_CHIBI [LEN_IMG_BYTE_ARR] PROGMEM;
extern const unsigned char BLANK_CHIBI [LEN_IMG_BYTE_ARR] PROGMEM;
extern const unsigned char * ALL_CHIBIS[] PROGMEM;
extern unsigned char outputImage [LEN_IMG_BYTE_ARR];


typedef struct _COMPRESSED_CHIBI
{
	unsigned char BytesOfSize;
	unsigned char * Data;

} COMPRESSED_CHIBI, *PTR_COMPRESSED_CHIBI;


typedef struct _ENCODED_PAIR
{
	unsigned char Value;
	unsigned char Reps;
} ENCODED_PAIR, *PTR_ENCODED_PAIR;


// HAPPY_CHIBI compressed using run-length encoding
// Can ignore for now
const unsigned char HAPPY_CHIBI_COMPRESSED [] PROGMEM = 
	{
		0x3, 0x51, 0xff, 0xff, 0xff, 0xa3, 0xe0, 0x1, 0xf, 0x1, 0xff, 0x6, 0xf8, 0x1, 0x1, 0x1, 
		0xff, 0x6, 0x80, 0x1, 0x1, 0x1, 0xff, 0x6, 0xe0, 0x1, 0x0, 0x1, 0x7f, 0x1, 0xff, 0x4, 
		0xfe, 0x1, 0x0, 0x2, 0xff, 0x6, 0x80, 0x1, 0x0, 0x1, 0x3f, 0x1, 0xff, 0x4, 0xfc, 0x1, 
		0x0, 0x2, 0x7f, 0x1, 0xff, 0x5, 0x0, 0x2, 0x1f, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 
		0x3f, 0x1, 0xff, 0x4, 0xfe, 0x1, 0x0, 0x2, 0xf, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x0, 0x2, 
		0x1f, 0x1, 0xff, 0x4, 0xfc, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 
		0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 
		0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x1c, 0x1, 
		0x6, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x7, 0x1, 0x1, 0x1, 0x81, 0x1, 0xff, 0x4, 
		0xc0, 0x1, 0x7f, 0x1, 0x1f, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x1f, 0x1, 0xc7, 0x1, 
		0xc1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0xff, 0x1, 0x9f, 0x1, 0x83, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x1f, 0x1, 0xe7, 0x1, 0xe0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 0x9f, 0x1, 0x83, 0x1, 
		0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf7, 0x1, 0xe0, 0x1, 0xff, 0x4, 0x81, 0x1, 0xff, 0x1, 
		0xdf, 0x1, 0x83, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf7, 0x1, 0xe0, 0x1, 0xff, 0x4, 
		0x81, 0x1, 0xff, 0x1, 0xcf, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf3, 0x1, 
		0xc0, 0x1, 0xff, 0x4, 0x81, 0x1, 0xff, 0x1, 0xc0, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 
		0x3f, 0x1, 0xf0, 0x1, 0x0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 0x80, 0x1, 0x3, 0x1, 
		0xff, 0x4, 0xe0, 0x1, 0x3f, 0x1, 0xf0, 0x1, 0x0, 0x1, 0xff, 0x4, 0x80, 0x1, 0xff, 0x1, 
		0x80, 0x1, 0x3, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x1f, 0x1, 0xe0, 0x1, 0x0, 0x1, 0xff, 0x4, 
		0x80, 0x1, 0x7f, 0x1, 0x0, 0x1, 0x3, 0x1, 0xff, 0x4, 0xf0, 0x1, 0x1f, 0x1, 0xc0, 0x1, 
		0x0, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x1c, 0x1, 0x0, 0x1, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x7, 0x1, 0x0, 0x2, 0xff, 0x4, 0xc0, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xf0, 0x1, 
		0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xc0, 0x1, 0x0, 0x2, 0x7, 0x1, 0xff, 0x4, 0xf8, 0x1, 
		0x0, 0x2, 0x1, 0x1, 0xff, 0x4, 0xe0, 0x1, 0x0, 0x2, 0xf, 0x1, 0xff, 0x4, 0xf8, 0x1, 
		0x0, 0x2, 0x3, 0x1, 0xff, 0x4, 0xfc, 0x1, 0x0, 0x2, 0x1f, 0x1, 0xff, 0x4, 0xfc, 0x1, 
		0x0, 0x2, 0x1f, 0x1, 0xff, 0x5, 0x80, 0x1, 0x0, 0x1, 0x1f, 0x1, 0xff, 0x4, 0xfe, 0x1, 
		0x0, 0x2, 0xff, 0x6, 0xe0, 0x1, 0x0, 0x1, 0x3f, 0x1, 0xff, 0x4, 0xfe, 0x1, 0x0, 0x1, 
		0x3, 0x1, 0xff, 0x6, 0xf8, 0x1, 0x0, 0x1, 0x7f, 0x1, 0xff, 0x5, 0x0, 0x1, 0x7, 0x1, 
		0xff, 0x6, 0xfc, 0x1, 0x1, 0x1, 0xff, 0x6, 0xc0, 0x1, 0xf, 0x1, 0xff, 0x6, 0xfe, 0x1, 
		0x3, 0x1, 0xff, 0x1, 0xe7, 0x1, 0xff, 0x2, 0xfb, 0x1, 0xff, 0x1, 0xf0, 0x1, 0x1f, 0x1, 
		0xff, 0x6, 0xfe, 0x1, 0x1f, 0x1, 0xff, 0x1, 0xc7, 0x1, 0xff, 0x2, 0xf1, 0x1, 0xff, 0x1, 
		0xfe, 0x1, 0x3f, 0x1, 0xff, 0x9, 0xc3, 0x1, 0xff, 0x2, 0xf1, 0x1, 0xff, 0xc, 0xe3, 0x1, 
		0xff, 0x2, 0xe1, 0x1, 0xff, 0xc, 0xe3, 0x1, 0xff, 0x2, 0xe3, 0x1, 0xff, 0xc, 0xe1, 0x1, 
		0xff, 0x2, 0xe3, 0x1, 0xff, 0xc, 0xf0, 0x1, 0xff, 0x2, 0xc3, 0x1, 0xff, 0xc, 0xf0, 0x1, 
		0x7f, 0x1, 0xff, 0x1, 0x87, 0x1, 0xff, 0xc, 0xf8, 0x1, 0x3f, 0x1, 0xfe, 0x1, 0xf, 0x1, 
		0xff, 0xc, 0xfc, 0x1, 0x7, 0x1, 0xf8, 0x1, 0x1f, 0x1, 0xff, 0xc, 0xfe, 0x1, 0x0, 0x2, 
		0x3f, 0x1, 0xff, 0xd, 0x80, 0x1, 0x0, 0x1, 0xff, 0xe, 0xf0, 0x1, 0x3, 0x1, 0xff, 0xa7
		
	};

// TASK HERE
// This should be the last frame of the animation
// First frame of the animation should have mouth straight like an underscore _
// Animation should make mouth curve upward until it matches the image below.
// You will need to generate the image with the flat mouth.
// Write a loop that starts with the flat-mouth image and ends with the image below.
// Idk what else to say rn.
const unsigned char HAPPY_CHIBI [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x1c, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x01, 0x81, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x7f, 0x1f, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xc7, 0xc1, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0xff, 0x9f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x9f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xdf, 0x83, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf7, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xcf, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf3, 0xc0, 0xff, 0xff, 
	0xff, 0xff, 0x81, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xf0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xe0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x7f, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xc0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x1c, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xe7, 0xff, 0xff, 0xfb, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xc7, 0xff, 0xff, 0xf1, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

typedef enum _ENUM_ALL_CHIBIS
{
	NUM_BLANK_CHIBI = 0,
	NUM_HAPPY_CHIBI = 1,
	NUM_CHIBI_MAX
} ENUM_ALL_CHIBIS, *PTR_ENUM_ALL_CHIBIS;


void rleDecompressImage(const unsigned char * CompImage);

unsigned char * chibisAnimateBlankToSmile(unsigned char Frame);

void chibisLoadBaseOutputFrame(unsigned char Index);

#endif